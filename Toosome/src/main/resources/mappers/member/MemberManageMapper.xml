<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.web.toosome.admin.memberManagement.dao.IMemberManageMapper">

	<resultMap type="memberVO" id="memberMap">
		<id property="memberId" column="MEMBER_ID"/>
		<result property="memberName" column="MEMBER_NAME"/>
		<result property="memberEmail" column="MEMBER_EMAIL"/>
		<result property="memberPassword" column="MEMBER_PASSWORD"/>
		<result property="memberBirth" column="MEMBER_BIRTH"/>
		<result property="memberPhone" column="MEMBER_PHONE"/>
		<result property="memberPostcode" column="MEMBER_POSTCODE"/>
		<result property="memberAddress" column="MEMBER_ADDRESS"/>
		<result property="platFormType" column="MEMBER_PLATFORM_TYPE"/>
		<result property="regDate" column="MEMBER_REG_DATE"/>
		<result property="status" column="MEMBER_STATUS"/>
		<result property="lastLoginDate" column="MEMBER_LAST_LOGIN_DATE"/>
		<result property="memberRePassword" column="MEMBER_REPASSWORD"/>
		<collection property="authList" resultMap="authMap" />
	</resultMap>
	
	<resultMap type="authVO" id="authMap">
		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberAuth" column="MEMBER_AUTH" />
	</resultMap>
	
	<!-- 중복되는 동적 SQL문 처리-->
	<sql id="search">
		WHERE MEMBER_STATUS = 1 AND MEMBER_AUTH = 'ROLE_USER'
		<if test="condition == 'id'">
			AND mem.MEMBER_EMAIL LIKE CONCAT('%', #{keyword}, '%')
		</if>
		<if test="condition == 'name'">
			AND MEMBER_NAME LIKE CONCAT('%', #{keyword}, '%')
		</if>
		<if test="platFormType == 'normal'">
			AND MEMBER_PLATFORM_TYPE = 'Toosome';
		</if>
		<if test="platFormType == 'sns'">
			AND MEMBER_PLATFORM_TYPE IN ('naver', 'kakao');
		</if>
		<if test="startRegDate != null and startRegDate != ''">
			AND MEMBER_REG_DATE BETWEEN DATE(#{startRegDate}) AND DATE(#{endRegDate})+1
		</if>
		<if test="startLoginDate != null and startLoginDate != ''">
			AND MEMBER_REG_DATE BETWEEN DATE(#{startLoginDate}) AND DATE(#{endLoginDate})+1
		</if>
	</sql>
 	
	<select id="getMemberList" resultMap="memberMap">
		SELECT 
			MEMBER_ID,
			MEMBER_NAME,
			mem.MEMBER_EMAIL,
			MEMBER_PLATFORM_TYPE,
			MEMBER_REG_DATE,
			MEMBER_STATUS,
			MEMBER_AUTH,
			MEMBER_BIRTH,
			MEMBER_LAST_LOGIN_DATE,
			CASE
		        WHEN MEMBER_PHONE IS NULL THEN "No Phone"
		        ELSE MEMBER_PHONE
		    END as MEMBER_PHONE,
			CASE
		        WHEN MEMBER_POSTCODE IS NULL THEN "No Postcode"
		        ELSE MEMBER_POSTCODE
		    END as MEMBER_POSTCODE,
			CASE
		        WHEN MEMBER_ADDRESS IS NULL THEN "No Address"
		        ELSE MEMBER_ADDRESS
		    END as MEMBER_ADDRESS
		FROM MEMBER mem LEFT OUTER JOIN MEMBER_AUTH auth on mem.MEMBER_EMAIL = auth.MEMBER_EMAIL
		<include refid="search"/>
		ORDER BY MEMBER_ID DESC
		<if test="viewCount != null and viewCount != ''">
			LIMIT 0, #{viewCount}
		</if>
	</select>	
	
	<!-- 아이디로 회원 조회 -->
	<select id="getMember" resultMap="memberMap">
		SELECT
			MEMBER_ID,
			MEMBER_NAME,
			mem.MEMBER_EMAIL,
			MEMBER_PLATFORM_TYPE,
			MEMBER_REG_DATE,
			MEMBER_STATUS,
			MEMBER_AUTH,
			MEMBER_BIRTH,
			MEMBER_LAST_LOGIN_DATE,
			CASE
		        WHEN MEMBER_PHONE IS NULL THEN "No Phone"
		        ELSE MEMBER_PHONE
		    END as MEMBER_PHONE,
			CASE
		        WHEN MEMBER_POSTCODE IS NULL THEN "No Postcode"
		        ELSE MEMBER_POSTCODE
		    END as MEMBER_POSTCODE,
			CASE
		        WHEN MEMBER_ADDRESS IS NULL THEN "No Address"
		        ELSE MEMBER_ADDRESS
		    END as MEMBER_ADDRESS
		FROM
			MEMBER mem LEFT OUTER JOIN MEMBER_AUTH auth on mem.MEMBER_EMAIL = auth.MEMBER_EMAIL
		WHERE MEMBER_ID = #{id}
	</select>

	<!-- 회원정보 수정 -->
	<update id="updateMember">
		UPDATE MEMBER 
		 SET MEMBER_NAME = #{memberName}, MEMBER_PHONE = #{memberPhone}, MEMBER_POSTCODE = #{memberPostcode}, MEMBER_ADDRESS = #{memberAddress}
		WHERE MEMBER_ID = #{memberId};		 
	</update>
</mapper>